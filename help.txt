# Подключение к кластеру
$ ssh username@oak.cpct.sibsutis.ru
# Компилируем программу (mpicc, mpicxx, mpif90)
$ mpicc -o prog ./prog.c
# Подготовка файла задания (task.job) для системы SLURM
$ cat task.job
#!/bin/bash
#SBATCH --nodes=1 --ntasks-per-node=2
mpiexec ./test
# Ставим задачу в очередь
$ sbatch ./task.job
# Ждем получения результатов
$ squeue
# Состояние узлов
$ sinfo
# Отключение от кластера
$ exit
# Копирование на кластер с локальной машины
$ scp ./src.tar.gz username@oak.cpct.sibsutis.ru:~/src.tar.gz
# Пример программы
$ cat prog.c
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
int main(int argc, char **argv)
{
 int rank, size, len;
 char procname[MPI_MAX_PROCESSOR_NAME];
 MPI_Init(&argc, &argv);
 MPI_Get_processor_name(procname, &len);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 printf("Rank %d on %s\n", rank, procname);
 int count = 10000;
File: cluster-intro.txt Page 2 of 2
 char *buf = malloc(sizeof(*buf) * count);
 double t = MPI_Wtime();
 if (rank == 0) {
 buf[0] = 1;
 MPI_Send(buf, count, MPI_CHAR, 1, 0, MPI_COMM_WORLD);
 } else if (rank == 1) {
 MPI_Recv(buf, count, MPI_CHAR, 0, 0, MPI_COMM_WORLD,
MPI_STATUS_IGNORE);
 }
 t = MPI_Wtime() - t;
 printf("Rank %d/%d: buf = %d\n", rank, size, buf[0]);
 printf("Rank %d/%d: time (sec): %.6f\n", rank, size, t);
 free(buf);
 MPI_Finalize();
 return 0;
}